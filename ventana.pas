program Dlg4; uses App, Objects, Menus, Drivers, Views, Dialogs, MsgBox; const cmDialogo = 100; { La orden que vamos a crear } type Programa = object (TApplication) texto: string; procedure InitStatusLine; virtual; procedure HandleEvent(var Suceso: TEvent); virtual; procedure Dialogo; end; procedure Programa.InitStatusLine; var R: TRect; { Rectángulo de pantalla } begin GetExtent(R); { Miramos cuando ocupa } R.A.Y := R.B.Y - 1; { Nos quedamos la línea inferior } New(StatusLine, Init(R, NewStatusDef(0, $FFFF, NewStatusKey('~Alt-S~ Salir', kbAltS, cmQuit, NewStatusKey('~Alt-D~ Diálogo', kbAltD, cmDialogo, nil)), nil))); end; procedure Programa.HandleEvent(var Suceso: TEvent); var R: TRect; begin inherited HandleEvent(Suceso); { Primero que mire el "padre" } if Suceso.What = evCommand then { Si es una orden } case Suceso.Command of { Miramos qué orden es } cmDialogo: Dialogo; end; end; procedure Programa.Dialogo; var R: TRect; { El "rectángulo" que ocupará } D: PDialog; { La ventana en sí } Enlace: PView; { Para la enlazar la etiqueta con la InputLine } begin Texto := 'Texto por defecto'; { Texto inicial } R.Assign(0,0,50,15); { Definimos el tamaño } R.Move(15,5); { y la posición } D := New(PDialog, { Inicializamos: nuevo diálogo } Init(R, 'Más vistoso')); { en la zona R, y título Prueba } R.Assign(2,2,20,3); { Definimos una zona interior } D^.Insert(New(PStaticText, { e insertamos texto en ella } Init(R, 'Esto es un texto estático'))); R.Assign(5,11,20,13); { Igual para el primer botón } D^.Insert(New(PButton, Init(R, '~C~ancelar', cmCancel, bfNormal))); R.Assign(25,11,40,13); { Y para el segundo } D^.Insert(New(PButton, Init(R, '~A~ceptar', cmOK, bfDefault))); R.Assign(10,7,40,8); { Y para la línea de entrada } Enlace := New(PInputLine, Init(R, 50)); D^.Insert(Enlace); R.Assign(9,6,30,7); { Y la etiqueta asociada } D^.Insert(New(PLabel, Init(R, 'Texto:', Enlace))); ExecuteDialog(D,@Texto); { Ejecutamos, CON parámetros } MessageBox('Ha tecleado: '+ Texto, { Y mostramos el resultado } nil, mfInformation or mfOKButton); end; var Prog: Programa; begin Prog.Init; Prog.Run; Prog.Done; end.
